<?php&#10/**&#10 * @file&#10 * Platform.sh settings.&#10 */&#10&#10use Drupal\Core\Installer\InstallerKernel;&#10&#10$platformsh = new \Platformsh\ConfigReader\Config();&#10if (!$platformsh->inRuntime()) {&#10  return;&#10}&#10&#10// Configure the database.&#10if ($platformsh->hasRelationship('database')) {&#10  $creds = $platformsh->credentials('database');&#10  $databases['default']['default'] = [&#10    'driver' => $creds['scheme'],&#10    'database' => $creds['path'],&#10    'username' => $creds['username'],&#10    'password' => $creds['password'],&#10    'host' => $creds['host'],&#10    'port' => $creds['port'],&#10    'pdo' => [PDO::MYSQL_ATTR_COMPRESS => !empty($creds['query']['compression'])],&#10    'init_commands' => [&#10      'isolation_level' => 'SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED',&#10    ],&#10  ];&#10}&#10&#10// Enable verbose error messages on development branches, but not on the production branch.&#10// You may add more debug-centric settings here if desired to have them automatically enable&#10// on development but not production.&#10if (isset($platformsh->branch)) {&#10  // Production type environment.&#10  if ($platformsh->onProduction() || $platformsh->onDedicated()) {&#10    $config['system.logging']['error_level'] = 'hide';&#10  } // Development type environment.&#10  else {&#10    $config['system.logging']['error_level'] = 'verbose';&#10  }&#10}&#10&#10// Enable Redis caching.&#10if ($platformsh->hasRelationship('redis') && !InstallerKernel::installationAttempted() && extension_loaded('redis') && class_exists('Drupal\redis\ClientFactory')) {&#10  $redis = $platformsh->credentials('redis');&#10&#10  // Set Redis as the default backend for any cache bin not otherwise specified.&#10  $settings['cache']['default'] = 'cache.backend.redis';&#10  $settings['redis.connection']['host'] = $redis['host'];&#10  $settings['redis.connection']['port'] = $redis['port'];&#10&#10  // Apply changes to the container configuration to better leverage Redis.&#10  // This includes using Redis for the lock and flood control systems, as well&#10  // as the cache tag checksum. Alternatively, copy the contents of that file&#10  // to your project-specific services.yml file, modify as appropriate, and&#10  // remove this line.&#10  $settings['container_yamls'][] = 'modules/contrib/redis/example.services.yml';&#10&#10  // Allow the services to work before the Redis module itself is enabled.&#10  $settings['container_yamls'][] = 'modules/contrib/redis/redis.services.yml';&#10&#10  // Manually add the classloader path, this is required for the container cache bin definition below&#10  // and allows to use it without the redis module being enabled.&#10  $class_loader->addPsr4('Drupal\\redis\\', 'modules/contrib/redis/src');&#10&#10  // Use redis for container cache.&#10  // The container cache is used to load the container definition itself, and&#10  // thus any configuration stored in the container itself is not available&#10  // yet. These lines force the container cache to use Redis rather than the&#10  // default SQL cache.&#10  $settings['bootstrap_container_definition'] = [&#10    'parameters' => [],&#10    'services' => [&#10      'redis.factory' => [&#10        'class' => 'Drupal\redis\ClientFactory',&#10      ],&#10      'cache.backend.redis' => [&#10        'class' => 'Drupal\redis\Cache\CacheBackendFactory',&#10        'arguments' => ['@redis.factory', '@cache_tags_provider.container', '@serialization.phpserialize'],&#10      ],&#10      'cache.container' => [&#10        'class' => '\Drupal\redis\Cache\PhpRedis',&#10        'factory' => ['@cache.backend.redis', 'get'],&#10        'arguments' => ['container'],&#10      ],&#10      'cache_tags_provider.container' => [&#10        'class' => 'Drupal\redis\Cache\RedisCacheTagsChecksum',&#10        'arguments' => ['@redis.factory'],&#10      ],&#10      'serialization.phpserialize' => [&#10        'class' => 'Drupal\Component\Serialization\PhpSerialize',&#10      ],&#10    ],&#10  ];&#10}&#10&#10if ($platformsh->inRuntime()) {&#10  // Configure private and temporary file paths.&#10  if (!isset($settings['file_private_path'])) {&#10    $settings['file_private_path'] = $platformsh->appDir . '/private';&#10  }&#10  if (!isset($settings['file_temp_path'])) {&#10    $settings['file_temp_path'] = $platformsh->appDir . '/tmp';&#10  }&#10&#10  // Configure the default PhpStorage and Twig template cache directories.&#10  if (!isset($settings['php_storage']['default'])) {&#10    $settings['php_storage']['default']['directory'] = $settings['file_private_path'];&#10  }&#10  if (!isset($settings['php_storage']['twig'])) {&#10    $settings['php_storage']['twig']['directory'] = $settings['file_private_path'];&#10  }&#10&#10  // Set the project-specific entropy value, used for generating one-time&#10  // keys and such.&#10  $settings['hash_salt'] = empty($settings['hash_salt']) ? $platformsh->projectEntropy : $settings['hash_salt'];&#10&#10  // Set the deployment identifier, which is used by some Drupal cache systems.&#10  $settings['deployment_identifier'] = $settings['deployment_identifier'] ?? $platformsh->treeId;&#10}&#10&#10// The 'trusted_hosts_pattern' setting allows an admin to restrict the Host header values&#10// that are considered trusted.  If an attacker sends a request with a custom-crafted Host&#10// header then it can be an injection vector, depending on how the Host header is used.&#10// However, Platform.sh already replaces the Host header with the route that was used to reach&#10// Platform.sh, so it is guaranteed to be safe.  The following line explicitly allows all&#10// Host headers, as the only possible Host header is already guaranteed safe.&#10$settings['trusted_host_patterns'] = ['.*'];&#10&#10// Import variables prefixed with 'drupalsettings:' into $settings&#10// and 'drupalconfig:' into $config.&#10foreach ($platformsh->variables() as $name => $value) {&#10  $parts = explode(':', $name);&#10  list($prefix, $key) = array_pad($parts, 3, null);&#10  switch ($prefix) {&#10    // Variables that begin with `drupalsettings` or `drupal` get mapped&#10    // to the $settings array verbatim, even if the value is an array.&#10    // For example, a variable named drupalsettings:example-setting' with&#10    // value 'foo' becomes $settings['example-setting'] = 'foo';&#10    case 'drupalsettings':&#10    case 'drupal':&#10      $settings[$key] = $value;&#10      break;&#10    // Variables that begin with `drupalconfig` get mapped to the $config&#10    // array.  Deeply nested variable names, with colon delimiters,&#10    // get mapped to deeply nested array elements. Array values&#10    // get added to the end just like a scalar. Variables without&#10    // both a config object name and property are skipped.&#10    // Example: Variable `drupalconfig:conf_file:prop` with value `foo` becomes&#10    // $config['conf_file']['prop'] = 'foo';&#10    // Example: Variable `drupalconfig:conf_file:prop:subprop` with value `foo` becomes&#10    // $config['conf_file']['prop']['subprop'] = 'foo';&#10    // Example: Variable `drupalconfig:conf_file:prop:subprop` with value ['foo' => 'bar'] becomes&#10    // $config['conf_file']['prop']['subprop']['foo'] = 'bar';&#10    // Example: Variable `drupalconfig:prop` is ignored.&#10    case 'drupalconfig':&#10      if (count($parts) > 2) {&#10        $temp = &$config[$key];&#10        foreach (array_slice($parts, 2) as $n) {&#10          $prev = &$temp;&#10          $temp = &$temp[$n];&#10        }&#10        $prev[$n] = $value;&#10      }&#10      break;&#10  }&#10}&#10&#10